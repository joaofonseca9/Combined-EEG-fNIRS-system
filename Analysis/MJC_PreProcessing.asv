clear;
close all;

%% Initialize FieldTrip and EEGLAB
laptop='laptopCatarina';
% laptop='laptopMariana';
% laptop='laptopJoao';
[mainpath_in, mainpath_out, eeglab_path] = addFolders(laptop);

eeglab;
ft_defaults;

sub='04';
rec='01';

file = getFileNames(mainpath_out, sub, rec);

%% Select data folder 

sub_path = fullfile(mainpath_in,'source',['sub-',sub]);
eeg_path = fullfile(sub_path,'eeg');
nirs_path = fullfile(sub_path,'nirs');
sub_vhdr = fullfile(['sub-',sub,'_rec-',rec,'_eeg.vhdr']);

% Before changing directory to the subpath, add current directory to access
% the function files
addpath(pwd)
cd(sub_path);

oxyfile = fullfile(nirs_path,['sub-',sub,'_rec-',rec,'_nirs.oxy3']);

%% Upload files
correct = input('Load data (Y/N)? If not, its assumed the .set files have been generated \n', 's');
if strcmpi(correct, 'y')
    done = 1;
    data_loaded = 0;
elseif strcmpi(correct, 'n')
    data_loaded = 1;
end

%% Read data 
if data_loaded == 0
    % FIELDTRIP - load the eeg&nirs data
    cd(nirs_path);
    cfg = [];
    cfg.dataset = oxyfile;
    nirs_raw = ft_preprocessing(cfg);
    nirs_events = ft_read_event(cfg.dataset);
    if strcmp(sub,'03') && strcmp(rec,'02')
        nirs_events=ft_filter_event(nirs_events,'minsample',72787);
    end
    
    if strcmp(sub,'02') && strcmp(rec,'02')
        save(['sub-',sub,'_rec-',rec,'_nirseeg.mat'], 'nirs_raw');
        save(['sub-',sub,'_rec-',rec,'_nirseeg_events.mat'], 'nirs_events');
    else
        save(['sub-',sub,'_rec-',rec,'_nirs.mat'], 'nirs_raw');
        save(['sub-',sub,'_rec-',rec,'_nirs_events.mat'], 'nirs_events');
    end
    
    % EEGLAB load eeg only data
    [EEG,~]         = pop_loadbv(fullfile(sub_path,'eeg'), sub_vhdr);
    [ALLEEG,EEG,~]  = pop_newset(ALLEEG, EEG, 1,'setname','eeg_raw','gui','off','savenew',fullfile(eeg_path,['sub-',sub,'_rec-',rec,'_eeg']));

else % If data has been loaded and the datasets created, load the structs
    if strcmp(sub,'02') && strcmp(rec,'02')
        load(nirs_path,['sub-',sub,'_rec-',rec,'_nirseeg.mat']); % Avoids call to ft_preprocessing
        load(nirs_path,['sub-',sub,'_rec-',rec,'_nirseeg_events.mat']); % Avoids call to ft_readevents
    else
        load(fullfile(nirs_path,['sub-',sub,'_rec-',rec,'_nirs.mat'])); % Avoids call to ft_preprocessing
        load(fullfile(nirs_path,['sub-',sub,'_rec-',rec,'_nirs_events.mat'])); % Avoids call to ft_readevents
    end
    [EEG]  = pop_loadset(['sub-',sub,'_rec-',rec,'_eeg.set'],fullfile(sub_path,'eeg'));
end

%% Read stimuli results
if strcmp(sub,'02') && strcmp(rec,'02')
    nirs_raw = data_raw;
    nirs_events=eeg_fnirs_events;
end

results = load(fullfile(sub_path, 'stim', ['results_sub-',sub,'_rec-',rec]));
marker_table = checkMarkers(EEG, nirs_raw, nirs_events);

%% EEG: Load MNI coordinates
% Load channel coordinates/positions of the standard MNI model of eeglab: 
% MNI dipfit channel positions

[EEG] = pop_chanedit(EEG, 'lookup', join([eeglab_path,...
        '\\plugins\\dipfit\\standard_BESA\\standard-10-5-cap385.elp']),...
        'lookup', join([eeglab_path,...
        '\\plugins\\dipfit\\standard_BEM\\elec\\standard_1005.elc']));

%% EEG: Filter - 50 Hz noise and harmonics

% Determine the power spectrum of the raw data
eeg_raw = EEG.data;
% [P_raw, f_raw] = periodogram(eeg_raw', [], [] , EEG.srate);

% Filter the signal to obtain the desired frequencies and to eliminate the
% 50 Hz noise
if ~isfile(file.filtered) 
    eeg_filtered = filterNoise(double(eeg_raw), EEG, 4);
    EEG.data = eeg_filtered;
    [ALLEEG, EEG, ~] = pop_newset(ALLEEG, EEG, 1, 'setname', 'filtData',...
        'gui', 'off');
    save(file.filtered, 'EEG');
else
    load(file.filtered, 'EEG');
    eeg_filtered = EEG.data;
    [ALLEEG, EEG, ~] = pop_newset(ALLEEG, EEG, 1, 'setname', 'filtData',...
        'gui', 'off');
end

% Determine the power spectrum of the filtered data
% [P_filt, f_filt] = periodogram(eeg_filtered', [], [] , EEG.srate);

% Plot the power spectrums
% figure;
% subplot(1, 3, 1); plot(f_raw, P_raw); 
% xlim([0 200]); ylim([0 7e5]); title('EEG raw data');
% subplot(1, 3, 2); plot(f_filt, P_filt); 
% xlim([0 200]); ylim([0 7e5]); title('EEG filtered data - same scale');
% subplot(1, 3, 3); plot(f_filt, P_filt); 
% xlim([0 50]); title('EEG filtered data - different scale');

%% EEG: Remove bad channels 
% Visually inspect the signals and choose if a signals is too bad that it
% needs to be removed.
% First see the power spectrum and then check if the signal is actually bad
% on the plot.

if ~isfile(file.removedBadChannels) 
    figure; 
    pop_spectopo(EEG, 1, [0 EEG.pnts], 'EEG', 'percent', 50, 'freqrange',...
        [2 75], 'electrodes', 'off');
    pop_eegplot(EEG);
    RC = input('Remove channel [nr/no]: ','s');
    while ~strcmp(RC, 'no')
        [EEG] = pop_select(EEG, 'nochannel', eval(RC));
        figure;
        pop_spectopo(EEG, 1, [0 EEG.pnts], 'EEG', 'percent', 50,...
            'freqrange', [2 75], 'electrodes', 'off');
        pop_eegplot(EEG);
        RC = input('Remove channel [nr/no]: ','s');
    end
    [ALLEEG, EEG, ~] = pop_newset(ALLEEG, EEG, 1, 'setname',...
        'removedBadChannels', 'gui', 'off');
    save(file.removedBadChannels, 'EEG');
else
    load(file.removedBadChannels, 'EEG');
    [ALLEEG, EEG, ~] = pop_newset(ALLEEG, EEG, 1, 'setname',...
        'removedBadChannels', 'gui', 'off');
end

%% EEG: Removal of eye blinks - preICA
% Identify the different independent components in the signal

if ~isfile(file.preICA)  
    [EEG] = pop_runica(EEG,'icatype', 'runica', 'extended', 1,...
        'interrupt', 'on');
    [ALLEEG, EEG, ~] = pop_newset(ALLEEG, EEG, 1, 'setname', 'preICA',...
        'gui', 'off');
    save(file.preICA, 'EEG');
else
    load(file.preICA, 'EEG');
    [ALLEEG, EEG, ~] = pop_newset(ALLEEG, EEG, 1, 'setname', 'preICA',...
        'gui', 'off');
end

%% EEG: Removal of eye blinks - pstICA
% Visual analysis to remove the component corresponding to eye blinks

if ~isfile(file.pstICA)
    [EEG] = run_postICA(EEG);
    [ALLEEG, EEG, ~] = pop_newset(ALLEEG, EEG, 1, 'setname', 'pstICA',...
        'gui', 'off');
    save(file.pstICA, 'EEG');
else                          
    load(file.pstICA, 'EEG');
    [ALLEEG, EEG, ~] = pop_newset(ALLEEG, EEG, 1, 'setname', 'pstICA',...
        'gui', 'off');
end

%% EEG: Set reference
% Re-reference the system to linked mastoids

locs = {EEG.chanlocs.labels};
M1_loc = find(contains(locs, 'M1'));
M2_loc = find(contains(locs, 'M2'));

if ~isfile(file.preprocessed)
    [EEG] = pop_reref(EEG, [M1_loc, M2_loc]);
    [ALLEEG, EEG, ~] = pop_newset(ALLEEG, EEG, 1, 'setname',...
        'preprocessed', 'gui', 'off');
    save(file.preprocessed, 'EEG');
else                          
    load(file.preprocessed, 'EEG');
    [ALLEEG, EEG, ~] = pop_newset(ALLEEG, EEG, 1, 'setname',...
        'preprocessed', 'gui', 'off');
end

%% EEG: Extract task data
[EEG_divided, file] = extractTaskData_EEG(EEG,marker_table, results, file, mainpath_out);
save(file.EEG_divided,'EEG_divided');
% [ALLEEG,EEG,~]  = pop_newset(ALLEEG, EEG_task, 1,'setname','taskData','gui','off');

%% NIRS: Show layout of optode template
cfg = [];
cfg.layout = fullfile(mainpath_out,['sub-',sub],'3d','layout.mat');
ft_layoutplot(cfg);

%% NIRS: Select channels
% Selects channels that are also present in the original template
load(cfg.layout);
channels_conc = layout.label(1:(length(layout.label)-2)); % remove 'COMNT' and 'SCALE' from channel labels
for i = 1:length(channels_conc)
    tmp = strsplit(channels_conc{i});
    names_channels{i}=char(tmp(1));
    
    %!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    if contains(names_channels{i},'x-T')
       names_channels{i} = eraseBetween(names_channels{i},9,9);
       names_channels{i} = eraseBetween(names_channels{i},4,4);
    end
end
TF = startsWith(nirs_raw.label,names_channels);
channels_opt = nirs_raw.label(TF);

% Select data of correct channels
cfg = [];
cfg.inputfile = ['sub-',sub,'_rec-',rec,'_nirs.mat']; 
cfg.channel = channels_opt;
nirs_chan = ft_selectdata(cfg);
cd(nirs_path);
save('nirs_chan.mat', 'nirs_chan');

%% NIRS: Downsample the data (save memory, make processing faster and low pass filtering)
% The hemodynamic response takes about 5-10s (0.2-0.1Hz) to reach its peak.
% A 250 Hz measurement is much faster than needed so we need to downsample to 10Hz.  
% If resampling factor is larger than 10 -> resample multiple times
% New frequency must be higher than frequency of trigger

if ~exist(fullfile(['sub-',sub,'_rec-',rec,'_nirs.mat'],'nirs_raw'))
    cfg = [];
    cfg.inputfile = 'nirs_chan.mat';
    cfg.resamplefs = 10;
    nirs_down = ft_resampledata(cfg);
    cd(nirs_path);
    save('nirs_down.mat', 'nirs_down');
else load('nirs_down.mat')
end

% % Plot downsampled data
% cfg                = [];
% cfg.preproc.demean = 'yes';
% cfg.viewmode       = 'vertical';
% cfg.continuous     = 'no';
% cfg.ylim           = [ -0.003   0.003 ];
% cfg.channel        = 'Rx*'; % only show channels starting with Rx
% ft_databrowser(cfg, nirs_down);

%% NIRS: Extract task data (epoch)
clear pre post offset trl sel smp
load('nirs_down.mat');
load(['sub-',sub,'_rec-',rec,'_nirs.mat']);

if ~exist('nirs_epoch.mat') 
    % Find the event triggers and event types of the dataset
    cfg.dataset = oxyfile;
    cfg.trialdef = [];
    cfg.trialdef.eventtype = '?';
    cfg.trialdef.chanindx = -1;
    ft_definetrial(cfg);
    cfg = [];
    cfg.dataset = oxyfile;
    event = ft_read_event(cfg.dataset, 'chanindx', -1, 'type', 'event'); % filter out ADC channels (chanindx=-1) and other kind of events ('type'=event)
    
    % Extract the data
    [nirs_epoch] = extractTaskData_NIRS(nirs_raw, nirs_down, event, marker_table);
    cd(nirs_path);
    save('nirs_epoch.mat', 'nirs_epoch');
    
else
    load('nirs_epoch.mat')
end

% % Plot epoched optical density data around the first deviant stimulus
% idx = find(nirs_epoch.trialinfo==2, 1, 'first'); % check trials
% cfg          = [];
% cfg.channel  = 'Rx*';
% cfg.trials   = idx;
% cfg.baseline = 'yes';
% ft_singleplotER(cfg, nirs_epoch)

%% NIRS: Remove bad channels - Inspect the raw data visually 
% Show channels with low SCI
load('nirs_down.mat')
cfg = [];
nirs_sci = ft_nirs_scalpcouplingindex(cfg, nirs_down);

% Show names of bad channels
idx = find(~ismember(nirs_down.label, nirs_sci.label));
bad_nirschannels = nirs_down.label(idx);
disp('The following channels are removed from the data set:');
disp(bad_nirschannels);
cd(nirs_path);
save('nirs_sci.mat', 'nirs_sci');

% Inspect the data visually per channel
load('nirs_chan.mat'); % it's not possible to plot events on data that has been resampled
cfg = [];
cfg.preproc.demean = 'yes'; % substracts the mean value in the plot
cfg.viewmode = 'vertical';
cfg.event = ft_read_event(oxyfile, 'chanindx', -1, 'type', 'event');
cfg.ploteventlabels= 'colorvalue';
cfg.plotlabels= 'yes';
cfg.fontsize = 5;
cfg.continuous = 'yes'; 
cfg.blocksize = 300;
cfg.nirsscale = 10;
cfg.channel = 1:2; % [channels_opt(1), channels_opt(2)];
cfg.linecolor = 'brmm';
cfg.colorgroups = repmat([1 2],1, length(nirs_chan.label)/2);
ft_databrowser(cfg, nirs_chan);

% Inspect the data visually for each trial
load('nirs_epoch.mat'); 
cfg = [];
cfg.preproc.demean = 'yes'; % substracts the mean value in the plot so that the channels are well visualized above each other
cfg.viewmode = 'butterfly';
cfg.continuous = 'no';
cfg.ylim = [ -0.003   0.003 ];
cfg.channel = 'Rx*';
cfg.linecolor = 'br';
cfg.colorgroups = repmat([1 2],1, length(nirs_chan.label)/2);
ft_databrowser(cfg, nirs_epoch);

%% NIRS: Transform optical densities to oxy- and deoxy-hemoglobin concentration changes
load('data_epoch.mat');
cfg  = [];
cfg.target = {'O2Hb', 'HHb'};
cfg.channel = 'nirs'; % e.g. one channel incl. wildcards, you can also use ?all? to select all nirs channels
data_conc = ft_nirs_transform_ODs(cfg, data_epoch);
save('data_conc.mat','data_conc'); 