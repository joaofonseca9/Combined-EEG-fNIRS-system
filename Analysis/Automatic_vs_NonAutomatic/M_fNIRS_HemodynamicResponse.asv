%% Analysis of the EEG signals - separate channels.

clear; clc; close all;
addpath('C:\Users\maria\OneDrive\Documentos\GitHub\Combined-EEG-fNIRS-system\Analysis');

laptop = 'laptopMariana';
[mainpath_in, mainpath_out, eeglab_path] = addFolders(laptop);
results_path = 'C:\Users\maria\OneDrive\Ambiente de Trabalho\Automaticity Results\Hemodynamic Response';

subrec = ["04" "01"];

% Loop through every subject.
for subject = 1:size(subrec, 1)
    sub = subrec(subject, 1);
    rec = subrec(subject, 2);
  
    % Load the subject's fNIRS signals.
    load([mainpath_in, '\pre-processed\sub-', char(sub), '\nirs\sub-',...
        char(sub), '_rec-', char(rec), '_nirs_preprocessed.mat']);
    load([mainpath_in, '\pre-processed\sub-', char(sub), '\nirs\sub-',...
        char(sub), '_rec-', char(rec), '_nirs_epoch.mat']);
    nirs_preprocessed.trialinfo = nirs_epoch.trialinfo;
    nirs_preprocessed.sampleinfo = nirs_epoch.sampleinfo;
    
    % Load the layout of the optode's template.
    load(fullfile(mainpath_out,['sub-',char(sub)],'3d','layout.mat'), 'layout');
    
    % Keep only the trials of interest (Auto Cued, Non-Auto Cued, Auto
    % Uncued, Non-Auto Uncued)
    nirs = keepTrialsInterest(nirs_preprocessed);
    
    % Get the hemodynamic response of all conditions for the specific
    % subject.
    taskname = {'Auto Cued', 'Non-Auto Cued', 'Auto Uncued', 'Non-Auto Uncued'};
    [h, xval_allconditions, yval_allconditions] =...
        multiplot_condition(nirs, layout, [2 4 6 8], taskname,...
        'baseline', [-10 0], 'trials', false, 'topoplot', 'no', 'ylim',...
        [-0.5 1]);
    
    % Insert the subject's hemodynamic responses on a matrix of all
    % subjects.
    xval_allsubjects_allconditions(:, :, :, subject) = xval_allconditions; 
    yval_allsubjects_allconditions(:, :, :, subject) = yval_allconditions; 
    
    disp(['These are the results for subject ', char(sub), '.']);
    disp('Press any key to move onto the next subject.');
    pause;
    close all;

end

% Average the hemodynamic responses over all subjects.
xval_avgsubjects_allconditions = mean(xval_allsubjects_allconditions, 4); 
yval_avgsubjects_allconditions = mean(yval_allsubjects_allconditions, 4);

for con=1:size(xval_avgsubjects_allconditions, 3)
    f=1;

    % select channels that are both in data and layout
    data_labels=nirs.label;
    for i=1:length(data_labels)
        tmp = strsplit(data_labels{i});
        data_labels{i}=tmp{1};
    end
    [selchan, sellay] = match_str(data_labels, layout.label);% Take the subselection of channels that is contained

    % plot the data for the selected condition
    chanWidth=layout.width(sellay)*2;
    chanHeight=layout.height(sellay)*2;
    chanX=layout.pos(sellay,1);
    chanY=layout.pos(sellay,2);
    chanLabel  = layout.label(sellay);
    xlim=[-20 20];
    ylim=[-0.5 1];
    xmin=xlim(1);
    xmax=xlim(2);
    ymin=ylim(1);
    ymax=ylim(2);
    h{f}=figure; f=f+1;
        for c=1:2:length(selchan)
            xval=xavl_avgsubjects_allconditions(:, :, con);
            yval=xavl_avgsubjects_allconditions(:, :, con);
            hold on;
            ft_plot_vector(xval, yval, 'width', chanWidth(c), 'height', chanHeight(c), 'hpos', chanX(c), 'vpos', chanY(c), 'hlim', [xmin xmax], 'vlim', [ymin ymax], 'color', 'rb','linewidth', 1, 'axis', 'yes');
        end

end

%% Functions

function nirs_output = keepTrialsInterest(nirs_input)
% Go through the different trials and keep only the ones of interest:
% 2 - Auto Cued
% 4 - Non-Auto Cued
% 6 - Auto Uncued
% 8 - Non-Auto Uncued

nirs_output = nirs_input;
numRemovedTrials = 0;

% Go through the different trials.
for i=1:length(nirs_input.trialinfo)
    % If it is not a trial of interest.
    if nirs_input.trialinfo(i) ~= 2 && nirs_input.trialinfo(i) ~= 4 ...
            && nirs_input.trialinfo(i) ~= 6 ...
            && nirs_input.trialinfo(i) ~= 8
        % Eliminate that trial and all the unecessary information.
        nirs_output.trial(i-numRemovedTrials) = [];
        nirs_output.time(i-numRemovedTrials) = [];
        nirs_output.trialinfo(i-numRemovedTrials) = [];
        nirs_output.sampleinfo(i-numRemovedTrials, :) = [];
        % Increase number of removed trials.
        numRemovedTrials = numRemovedTrials+1;
    end 
end

end